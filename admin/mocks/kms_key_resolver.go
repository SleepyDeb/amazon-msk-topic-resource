// Code generated by MockGen. DO NOT EDIT.
// Source: admin/kms_key_resolver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws-samples/amazon-msk-topic-resource/types"
	gomock "github.com/golang/mock/gomock"
)

// MockKmsKeyResolverService is a mock of KmsKeyResolverService interface.
type MockKmsKeyResolverService struct {
	ctrl     *gomock.Controller
	recorder *MockKmsKeyResolverServiceMockRecorder
}

// MockKmsKeyResolverServiceMockRecorder is the mock recorder for MockKmsKeyResolverService.
type MockKmsKeyResolverServiceMockRecorder struct {
	mock *MockKmsKeyResolverService
}

// NewMockKmsKeyResolverService creates a new mock instance.
func NewMockKmsKeyResolverService(ctrl *gomock.Controller) *MockKmsKeyResolverService {
	mock := &MockKmsKeyResolverService{ctrl: ctrl}
	mock.recorder = &MockKmsKeyResolverServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKmsKeyResolverService) EXPECT() *MockKmsKeyResolverServiceMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockKmsKeyResolverService) Resolve(ctx context.Context, info *types.TopicInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, info)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockKmsKeyResolverServiceMockRecorder) Resolve(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockKmsKeyResolverService)(nil).Resolve), ctx, info)
}
