// Code generated by MockGen. DO NOT EDIT.
// Source: admin/user_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aws-samples/amazon-msk-topic-resource/types"
	gomock "github.com/golang/mock/gomock"
)

// MockUserManagerService is a mock of UserManagerService interface.
type MockUserManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerServiceMockRecorder
}

// MockUserManagerServiceMockRecorder is the mock recorder for MockUserManagerService.
type MockUserManagerServiceMockRecorder struct {
	mock *MockUserManagerService
}

// NewMockUserManagerService creates a new mock instance.
func NewMockUserManagerService(ctrl *gomock.Controller) *MockUserManagerService {
	mock := &MockUserManagerService{ctrl: ctrl}
	mock.recorder = &MockUserManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagerService) EXPECT() *MockUserManagerServiceMockRecorder {
	return m.recorder
}

// CreateACLs mocks base method.
func (m *MockUserManagerService) CreateACLs(ctx context.Context, topic, username, shortStackID string, permissions []types.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACLs", ctx, topic, username, shortStackID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateACLs indicates an expected call of CreateACLs.
func (mr *MockUserManagerServiceMockRecorder) CreateACLs(ctx, topic, username, shortStackID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACLs", reflect.TypeOf((*MockUserManagerService)(nil).CreateACLs), ctx, topic, username, shortStackID, permissions)
}

// CreateUser mocks base method.
func (m *MockUserManagerService) CreateUser(ctx context.Context, shortStackID, topic, kmsKeyID, clusterArn string, u *types.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, shortStackID, topic, kmsKeyID, clusterArn, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserManagerServiceMockRecorder) CreateUser(ctx, shortStackID, topic, kmsKeyID, clusterArn, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserManagerService)(nil).CreateUser), ctx, shortStackID, topic, kmsKeyID, clusterArn, u)
}

// DeleteACLs mocks base method.
func (m *MockUserManagerService) DeleteACLs(ctx context.Context, topic, username, shortStackID string, permissions []types.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteACLs", ctx, topic, username, shortStackID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteACLs indicates an expected call of DeleteACLs.
func (mr *MockUserManagerServiceMockRecorder) DeleteACLs(ctx, topic, username, shortStackID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACLs", reflect.TypeOf((*MockUserManagerService)(nil).DeleteACLs), ctx, topic, username, shortStackID, permissions)
}

// DeleteUser mocks base method.
func (m *MockUserManagerService) DeleteUser(ctx context.Context, u *types.User, kmsKeyID, topic, shortStackID, clusterArn string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, u, kmsKeyID, topic, shortStackID, clusterArn)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserManagerServiceMockRecorder) DeleteUser(ctx, u, kmsKeyID, topic, shortStackID, clusterArn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserManagerService)(nil).DeleteUser), ctx, u, kmsKeyID, topic, shortStackID, clusterArn)
}
